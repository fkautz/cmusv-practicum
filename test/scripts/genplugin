#!/usr/bin/python
#
# Wrapper script for ANT plugin packaging and signing tasks that will
# prompt for all the required input (unless otherwise supplied on the
# command line)

from sys import argv, exit
from getpass import getpass
from getopt import getopt, GetoptError
from os import path, environ, popen, getcwd

# Constants
SIGN_ONLY = 0
BUILD_ONLY = 1
BUILD_AND_SIGN = 2

validArgs = ["help", "nosign", "signonly", "jar=", "plugin=", "alias=", "keystore=", "password="]
passedArgs = {}

# By default, the mode is to build and sign plugins.
mode = BUILD_AND_SIGN

def usage(help):
    """ Print usage information """
    print "Usage: genplugin [--help] [--nosign | --signonly] [--jar <jarname>] \\\n \
		 [--plugin <plugin>] [--alias <alias>] [--keystore <keystore>] \\\n \
		 [--password <password>]"
    if (help):
	print """
 nosign       Build a plugin jar without signing it.
 signonly     Sign an existing JAR file.
 jar          The name of the JAR file to create.
 plugin       The full path of the plugin class or XML file from the
	      source directory, complete with extension, in the form
	      "org/lockss/plugin/foo/FooPlugin.class" or
	      "org/lockss/plugin/foo/FooPlugin.xml"
 alias        The alias to use when signing the jar.
 keystore     The keystore holding your signing key.
 password     Your signing password.
"""

def get_plugin_info(plugin):
    """ Given a name like foo/bar/BazPlugin.xml, return  the
    tuple ('foo/bar', 'BazPlugin.xml')"""

    return path.split(plugin)


#
# If any arguments have not been supplied on the command-line,
# prompt for them.
#
def prompt_for_missing_args():
    """ Prompt the user for missing arguments """
    global mode
    
    if not passedArgs.has_key("jar"):
	passedArgs["jar"] = raw_input("JAR file: ")

    if not mode == SIGN_ONLY:
	if not passedArgs.has_key("plugin"):
	    passedArgs["plugin"] = raw_input("Plugin class or XML file: ")

    if not mode == BUILD_ONLY:
	if not passedArgs.has_key("alias"):
	    passedArgs["alias"] = raw_input("Signing alias: ")

	if not passedArgs.has_key("keystore"):
	    passedArgs["keystore"] = raw_input("Signing keystore: ")

	if not passedArgs.has_key("password"):
	    passedArgs["password"] = getpass("Signing Password: ")

#
# Parse passed-in command-line arguments.
#
def parse_options(argv):
    """ Parse command-line options """
    global mode
    
    if len(argv) == 0:
	print "For help, use the --help option."

    (opts, args) = getopt(argv, None, validArgs)

    if len(args) > 0:
	usage(0)
	exit(1)

    for (opt, arg) in opts:
	if opt == "--help":
	    usage(1)
	    exit()
	elif opt == "--signonly":
	    mode = SIGN_ONLY
	elif opt == "--nosign":
	    mode = BUILD_ONLY
	elif opt == "--jar":
	    passedArgs["jar"] = arg
	elif opt == "--plugin":
	    passedArgs["plugin"] = arg
	elif opt == "--alias":
	    passedArgs["alias"] = arg
	elif opt == "--password":
	    passedArgs["password"] = arg
	elif opt == "--keystore":
	    passedArgs["keystore"] = arg

#
# Search up the tree until the 'build.xml' file is found, and call
# the ANT command.
#
def run_ant(command):
    """ Run ANT, print the output if there is error. """

    antBin = path.join(environ.get('ANT_HOME'), 'bin', 'ant')

    child = popen(antBin + " -f " + buildXml + " " + command)
    output = child.read()
    err = child.close()
    if err:
	print "Ant failed.  Output:"
	print output

    return err

#
# Search up the tree until build.xml is found.  If it cannot be found, exit.
#
def find_build_xml():
    path_elements =  getcwd().split("/")

    while len(path_elements) > 1:
	file = "/".join(path_elements) + "/" + "build.xml";
	if path.exists(file) and path.isfile(file):
	    print "Using build xml file " + file
	    return file
	else:
	    path_elements = path_elements[:len(path_elements) - 1]

    # File wasn't found.
    return None


#
# Sign-only
#
def sign_plugin():
    """ Sign an existing plugin JAR """
    print ("Signing plugin %s..." % passedArgs["jar"])

    command = "sign-plugin" + \
	      " -Dplugin-jarfile=" + passedArgs["jar"] + \
	      " -Dsign-alias=" + passedArgs["alias"] + \
	      " -Dsign-keystore=" + passedArgs["keystore"] + \
	      " -Dsign-keypass=" + passedArgs["password"] + \
	      " -Dsign-storepass=" + passedArgs["password"]

    err = run_ant(command)

    if not err:
	print "Plugin %s signed successfully." % passedArgs["jar"]

#
# Build jar and optionally sign
#
def gen_plugin():
    """ Generate and sign an plugin JAR"""
    global mode
    
    try:
	(plugin_path, plugin) = get_plugin_info(passedArgs["plugin"])
    except AttributeError:
	print "Error while trying to parse input."
	exit(1)

    print ("Building plugin %s..." % passedArgs["jar"])

    command = "build-plugin" + \
	      " -Dplugin-jarfile=" + passedArgs["jar"] + \
	      " -Dplugin-path=" + plugin_path + \
	      " -Dplugin-file=" + plugin

    if not mode == BUILD_ONLY:
	command = command + \
	      " -Dsign-alias=" + passedArgs["alias"] + \
	      " -Dsign-keystore=" + passedArgs["keystore"] + \
	      " -Dsign-keypass=" + passedArgs["password"] + \
	      " -Dsign-storepass=" + passedArgs["password"]

    err = run_ant(command)
    if not err:
	if mode == BUILD_ONLY:
	    print "Plugin %s created successfully." % passedArgs["jar"]
	else:
	    print "Plugin %s created and signed successfully." % passedArgs["jar"]

def main():
    """ Main entry point """
    global mode
    
    # Make sure ANT is available
    if not environ.has_key('ANT_HOME'):
	print "Can't continue. 'ANT_HOME' must be defined in your environment."
	exit(1)

    global buildXml

    buildXml = find_build_xml()

    if not buildXml:
	print "Unable to find build.xml file."
	exit(1)

    # Parse command line options
    try:
	parse_options(argv[1:])
    except GetoptError:
	usage(0)
	exit(1)

    # Get missing input
    try:
	prompt_for_missing_args()
    except SyntaxError:
	print "Problem while parsing input"
	exit(1)

    # Actually generate the plugin and sign it.
    if mode == SIGN_ONLY:
	sign_plugin()
    elif mode == BUILD_AND_SIGN or mode == BUILD_ONLY:
	gen_plugin()

#
# Main
#
if __name__ == "__main__":
    try:
	main()
    except KeyboardInterrupt:
	print
	exit(0)
