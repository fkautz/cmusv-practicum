#!/bin/bash
# Script run as root from /etc/init.d/lockss to start the daemon
# as the specific user provided as the argument.  Linux specific.

is_secure() {
    local TMPFILE=`mktemp /tmp/runssl.XXXXX`
    local RET=0
    ls -l ${1} >${TMPFILE}
    read A B C D E <${TMPFILE}
    if [ "X${A}" != "X-rwxr-xr-x" -o "X${C}" != "Xroot" ]; then
        RET=1
    fi
    rm -f ${TMPFILE}
    return ${RET}
}

if [ "${USER}X" != "rootX" ]; then
    echo "Must run as root."
    exit 1
fi
if [ -x /etc/lockss/functions ] ; then
    if is_secure /etc/lockss/functions ; then
        . /etc/lockss/functions
    else
        echo "/etc/lockss/functions insecure"
        exit 1
    fi
else
    echo "Can't find LOCKSS functions"
    exit 1
fi
if [ "X$1" = X ]; then
    echo "Usage: startdaemon user"
    exit 1
fi
set_variables $1
if [ -f ${CFG_FILE} ]; then
    # CFG_FILE should only set environment variables - avoid executing it
    for KEY in `sed -n 's/^\([A-Z0-9_]*\)=.*$/\1/p' <${CFG_FILE}` ; do
        VALUE=`sed -n /${KEY}=/s///p <${CFG_FILE}`
        VALUE2=`echo ${VALUE} | sed -n '/^"\(.*\)"$/s//\1/p'`
        if [ "X${VALUE2}" = X ]; then
            # Not quoted
            export ${KEY}=${VALUE}
        else
            # ${VALUE} quoted
            export ${KEY}="\"${VALUE2}\""
        fi
    done
else
    echo "${CFG_FILE} missing; run ${CFG_SCRIPT}"
    exit 1
fi
if [ "X${LOCKSS_CONFIG_VERSION}" != X ] ; then
    CURRENT_CONFIG_VERSION=`sed -n 's/^.*LOCKSS_CONFIG_VERSION=\([1-9][0-9]*\).*$/\1/p' </etc/lockss/hostconfig`
    if [ "X${CURRENT_CONFIG_VERSION}" != X -a "${LOCKSS_CONFIG_VERSION}" != "${CURRENT_CONFIG_VERSION}" ] ; then
        echo "Config version skew: required ${CURRENT_CONFIG_VERSION} have ${LOCKSS_CONFIG_VERSION}."
        echo "Not starting LOCKSS. Please run /etc/lockss/hostconfig."
        exit 1
    fi
fi
if [ "X${LOG_FILE}" = X -o ! -f ${LOG_FILE} ]; then
    echo "No log file - can't start $1"
    exit 1
fi
touch ${KEEP_GOING}
chown $1 ${KEEP_GOING}
if [ -x /etc/lockss/runssl.$1 ]; then
    RUN_SSL="/etc/lockss/runssl.$1"
elif [ -x /etc/lockss/runssl ]; then
    RUN_SSL="/etc/lockss/runssl"
fi
while [ -f ${KEEP_GOING} ]; do
    rm -f ${LOCAL_TXT}
    # If optional SSL setup script exists and is executable, run it.
    # It will have the environment variables set by set_variables()
    # in /etc/lockss/functions and by ${CFG_FILE}
    if [ "X${RUN_SSL}" != X ]; then
        if [ -x ${RUN_SSL} ]; then
            LOCKSS_CONFIG_DIR=${RUN_DIR}
            mkdir -p ${LOCKSS_CONFIG_DIR}
            chown root ${LOCKSS_CONFIG_DIR}
            chmod go-w ${LOCKSS_CONFIG_DIR}
            rm -f ${LOCKSS_SSL_CONFIG}
            ${RUN_SSL} --release @RELEASENAME@ --user $1 >>${LOG_FILE} 2>&1
            if [ -s ${LOCKSS_SSL_CONFIG} ]; then
                chmod go-rwx ${LOCKSS_SSL_CONFIG}
                chown $1 ${LOCKSS_SSL_CONFIG}
            fi
        fi
    fi
    START_TIME=`date +%s`
    runuser -s /bin/bash - $1 -c "ulimit -S -c 0 >/dev/null 2>&1 ; /etc/lockss/rundaemon wait"
    EXIT_CODE=$?
    END_TIME=`date +%s`
    RUN_TIME=`expr ${END_TIME} - ${START_TIME}`
    echo "stopped with status ${EXIT_CODE} at `date` after ${RUN_TIME} sec." >>${LOG_FILE}
    if [ ${RUN_TIME} -lt 60 ]; then
        exit 1
    fi
    if [ -f ${KEEP_GOING} ]; then
        sleep 30
    fi
done &
exit 0
