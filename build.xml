<!--
========================================================================
 $Id$
 Ant build file for LOCKSS daemon
========================================================================
Copyright (c) 2000-2003 Board of Trustees of Leland Stanford Jr. University,
all rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of Stanford University shall not
be used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from Stanford University.
========================================================================

-->

<project name="LOCKSS Gamma" default="test-all" basedir=".">

<description>
Args:
  -Dargs="args ..."        Supply cmd line args to run-class
  -Dclass=pack.age.Class   Specify class for test-one, test-class, run-class
  -Dcvstag=tag             Cvs tag to checkout for post-commit-test
  -Dexclude=path           Exclude matching tests.
  -Dfile=path/to/file      Specify file for print or index.
                              File is relative to project base dir
  -Dfiltertrace=no         Don't filter junit frames from backtrace.
  -Dfork=true              Run each test in a separate jvm.  (Default is true,
                              setting to false will cause some tests to fail.)
  -Dforkc=true             Run compiler in a separate jvm.
  -Dhalt=false             Run all tests in group, even if some fail.
  -Dinclude=path           Include matching tests.
  -Dkeeptempfiles=true     Don't delete temp files after tests run.
  -Dlistfiles=true         List the source files that will be compiled.  Use if
                              a compile step runs when nothing should need to
                              be compiled, to find package/dir disagreements.
  -Dloglevel=debug         Set default log level to debug for
                              test-all, test-one, test-class, run-class.
  -Dlogtarget=Class        Set default log target.
  -Dscript=name            Script run by jdftp.  Default is lockss-jdftp.
  -Dshowoutput=yes         With test-one, show System.err output as it happens.
  -Dtimeout=msecs          Override the default test failure timeout.
  -Dauthor=true            Include author info in javadoc.
  -Dversion=true           Include version info in javadoc.
</description>

  <!-- Defaults -->
  <property name="loglevel" value="" />
  <property name="showoutput" value="no" />
  <property name="filtertrace" value="yes" />
  <property name="timeout" value="" />
  <property name="keeptempfiles" value="" />
<!-- Some tests will not work right if fork=no  -->
  <property name="fork" value="yes" />
  <property name="forkc" value="yes" />
  <property name="exclude" value="" />
  <property name="halt" value="true" />
  <property name="author" value="false" />
  <property name="version" value="false" />


  <property environment="env"/>
  <!--  Ignore system classpath, to ensure consistent builds -->
  <property name="build.sysclasspath" value="ignore" />

  <!--  CVS-related -->
  <property name="cvs.project"    value="lockss-daemon" />

  <!--  Directories -->
  <property name="java.lib"       value="${env.JAVA_HOME}/lib" />

  <property name="src"            value="${basedir}/src" />
  <property name="classes"        value="${basedir}/classes" />
  <property name="lib"            value="${basedir}/lib"/>
  <property name="test"           value="${basedir}/test"/>
  <property name="test.src"       value="${test}/src"/>
  <property name="test.classes"   value="${test}/classes" />
<!--    <property name="test.lib"       value="${test}/lib"/> -->
  <property name="test.lib"       value="${lib}"/>
  <property name="test.results"   value="${test}/results"/>
  <property name="test.native"    value="${test}/native"/>

  <property name="ant"           value="${basedir}/ant"/>
  <property name="ant.src"       value="${ant}/src"/>
  <property name="ant.classes"   value="${ant}/classes" />

  <property name="tools"           value="${basedir}/tools"/>
  <property name="tools.src"       value="${tools}/src"/>
  <property name="tools.classes"   value="${tools}/classes" />

  <property name="tools.test"      value="${tools}/test"/>
  <property name="tools.test.src"  value="${tools.test}/src"/>
  <property name="tools.test.classes" value="${tools.test}/classes"/>
  <property name="tools.test.results" value="${tools.test}/results"/>

  <property name="generated"           value="${basedir}/generated"/>
  <property name="generated.src"       value="${generated}/src"/>
  <property name="generated.classes"   value="${generated}/classes" />

  <property name="generated.test"      value="${generated}/test"/>
  <property name="generated.test.src"  value="${generated.test}/src"/>
  <property name="generated.test.classes" value="${generated.test}/classes"/>
  <property name="generated.test.results" value="${generated.test}/results"/>

  <property name="instrumented" value="${basedir}/instrumented"/>

  <property name="wrapper.path"    value="org/lockss/plugin/wrapper"/>
  <property name="tobewrapped.src" value="${src}/org/lockss/plugin"/>
  <property name="plugin.wrapper.template" value="${tools.src}/pluginwrapper.xml" />

  <property name="javadoc"        value="${basedir}/javadoc"/>
  <property name="test.javadoc"   value="${test}/javadoc"/>
  <property name="depend.cache"   value="${basedir}/.depend"/>
  <property name="temp.build"     value="${basedir}/tempbuild"/>

  <!--  Jars -->
  <property name="castor.jar"     value="${lib}/castor-0.9.4.1-xml.jar"/>
  <property name="xerces.jar"     value="${lib}/xercesImpl.jar"/>
  <property name="xmlparser.jar"  value="${lib}/xmlParserAPIs.jar"/>
<!--  <property name="jetty.jar"     value="${lib}/org.mortbay.jetty.jar"/> -->
  <property name="jetty.jar"      value="${lib}/org.mortbay.jetty-jdk1.2.jar"/>
  <property name="jettytools.jar" value="${lib}/org.mortbay.tools.jar"/>
  <property name="servlet.jar"    value="${lib}/javax.servlet.jar"/>
  <property name="jaxp.jar"       value="${lib}/javax.xml.jaxp.jar"/>
<!--    <property name="xml.jar"  value="${lib}/org.apache.crimson.jar"/> -->
<!--    <property name="regexp.jar"     value="${lib}/gnu-regexp.jar"/> -->
  <property name="regexp.jar"     value="${lib}/gnu-regexp-1.1.4.jar"/>
  <property name="commons.collections.jar"
  				  value="${lib}/commons-collections.jar"/>
  <property name="commons.logging.jar"
  				  value="${lib}/commons-logging.jar"/>
  <property name="commons.httpclient.jar"
  				value="${lib}/commons-httpclient-2.0.jar"/>
  <property name="junit.jar"      value="${test.lib}/junit.jar"/>
  <property name="junit.addons.jar" value="${test.lib}/junit-addons-1.4.jar"/>
  <property name="httpunit.jar"    value="${test.lib}/httpunit.jar"/>
  <property name="htmlparser.jar"  value="${test.lib}/nekohtml.jar"/>
  <property name="js.jar"  value="${test.lib}/js.jar"/>
  <property name="jdk.tools.jar"      value="${java.lib}/tools.jar"/>
  <property name="jcoverage.jar"  value="${test.lib}/jcoverage.jar"/>
  <property name="bcel.jar"  value="${test.lib}/bcel.jar"/>
  <property name="log4j.jar"  value="${test.lib}/log4j-1.2.8.jar"/>
  <property name="oro.jar"  value="${test.lib}/jakarta-oro-2.0.8.jar"/>
  <property name="getopt.jar"  value="${test.lib}/java-getopt-1.0.9.jar"/>
  <property name="lockss.jar"     value="${lib}/lockss.jar"/>
  <property name="lockss.test.jar" value="${test.lib}/lockss-test.jar"/>
  <property name="lockss.ant.jar" value="${lib}/lockss-ant.jar"/>
  <property name="lockss.tools.jar" value="${lib}/lockss-tools.jar"/>
  <property name="lockss.tools.test.jar" value="${lib}/lockss-tools-test.jar"/>
  <property name="lockss.generated.jar" value="${lib}/lockss-generated.jar"/>
  <property name="lockss.generated.test.jar" value="${lib}/lockss-generated-test.jar"/>

  <property name="ant-contrib.jar"      value="${lib}/ant-contrib-0.6.jar"/>

  <!--  Files -->
  <property name="test.classpath.file" value="${test}/test-classpath"/>
  <property name="production.classpath.file" value="${lib}/run-classpath"/>
  <property name="tools.classpath.file" value="${lib}/tools-classpath"/>
  <!--  This path is also known to org.lockss.util.BuildInfo class -->
  <property name="build.info.file"
                     value="${classes}/org/lockss/htdocs/build.properties"/>
  <property name="build.filerev.file"
                     value="${classes}/revision-info"/>

  <property name="ant-contrib.resource"
                          value="net/sf/antcontrib/antcontrib.properties"/>

  <!--  Compiler options -->
  <property name="javac.debug"             value="on" />
  <property name="javac.optimize"          value="off" />
  <property name="javac.deprecation"       value="true" />

  <!--  Classpaths -->
  <path id="compile.classpath">
    <pathelement path="${regexp.jar}" />
    <pathelement path="${commons.collections.jar}" />
    <pathelement path="${commons.logging.jar}" />
    <pathelement path="${commons.httpclient.jar}" />
    <pathelement path="${jetty.jar}" />
    <pathelement path="${jettytools.jar}" />
    <pathelement path="${servlet.jar}" />
    <pathelement path="${castor.jar}" />
    <pathelement path="${xerces.jar}" />
    <pathelement path="${xmlparser.jar}" />
    <pathelement path="${oro.jar}" />
  </path>

  <path id="run.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${lockss.jar}" />
  </path>

  <path id="test.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${lockss.jar}" />
    <pathelement path="${junit.jar}" />
    <pathelement path="${junit.addons.jar}" />
    <pathelement path="${httpunit.jar}" />
    <pathelement path="${htmlparser.jar}" />
    <pathelement path="${js.jar}" />
  </path>

  <path id="test.run.classpath">
    <path refid="test.compile.classpath" />
    <pathelement path="${lockss.test.jar}" />
    <pathelement path="${lockss.ant.jar}" />
  </path>

  <path id="tools.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${lockss.jar}" />
    <pathelement path="${jdk.tools.jar}" />
  </path>

  <path id="generated.compile.classpath">
    <path refid="tools.compile.classpath" />
  </path>

  <path id="tools.run.classpath">
    <path refid="tools.compile.classpath" />
    <pathelement path="${lockss.tools.jar}" />
  </path>

  <path id="tools.test.compile.classpath">
    <path refid="tools.compile.classpath" />
    <path refid="test.compile.classpath" />
    <pathelement path="${lockss.test.jar}" />
    <pathelement path="${lockss.tools.jar}" />
  </path>

  <path id="generated.test.compile.classpath">
    <path refid="tools.test.compile.classpath" />
    <pathelement path="${lockss.generated.jar}" />
  </path>

  <path id="tools.test.run.classpath">
    <path refid="tools.test.compile.classpath" />
    <pathelement path="${lockss.tools.test.jar}" />
    <pathelement path="${lockss.generated.jar}" />
  </path>

 <path id="generated.test.run.classpath">
    <path refid="tools.test.run.classpath" />
    <pathelement path="${lockss.generated.test.jar}" />
  </path>

  <path id="one.test.run.classpath" >
    <path refid="generated.test.run.classpath" />
    <pathelement path="${lockss.tools.jar}"/>
  </path>

  <path id="ant-contrib.classpath">
    <pathelement location="${ant-contrib.jar}"/>
  </path>

  <path id="jcover.run.classpath">
    <path refid="test.run.classpath" />
    <pathelement path="${jcoverage.jar}" />
    <pathelement path="${log4j.jar}" />
    <pathelement path="${bcel.jar}" />
    <pathelement path="${oro.jar}" />
    <pathelement path="${getopt.jar}" />
  </path>

  <!--  Need ant jar to compile ant extensions, so include ant's classpath -->
  <path id="ant.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${java.class.path}" />
  </path>

  <!-- ==================================================================== -->
  <!--  Setup tasks -->
  <!-- ==================================================================== -->
  <target name="prepare">
    <mkdir dir="${classes}" />

    <condition property="detected.os" value="unix">
      <os family="unix"/>
    </condition>
    <condition property="detected.os" value="windows">
      <os family="dos"/>
    </condition>
  </target>

  <!-- ==================================================================== -->
  <target name="prepare.test"
      depends="prepare,-set.junit.task.available,-set.junit.available,jar-ant,check.contrib">
    <mkdir dir="${test.classes}" />
    <mkdir dir="${test.results}" />
    <condition property="class.arg.specified">
      <and>
        <isset property="class" />
        <not>
          <equals arg1="${class}" arg2="" trim="true" />
        </not>
      </and>
    </condition>

    <!-- Default logtarget to AntTaskTarget only if not forking tests -->
    <if>
     <isfalse value="${fork}" />
     <then>
      <property name="logtarget" value="org.lockss.util.AntTaskTarget" />
     </then>
     <else>
      <property name="logtarget" value="" />
     </else>
    </if>
  </target>

  <target name="-check-if-1.4">
    <condition property="jvm-1.4">
      <equals arg1="1.4" arg2="${ant.java.version}"/>
    </condition>
    <fail unless="jvm-1.4">
The target you have selected requires compiling under JDK 1.4.  Use the rant -1.4 option
    </fail>
  </target>

  <target name="prepare.run.test"
       depends="prepare.test,-set.junit.logger.task.available">
  </target>

  <target name="prepare.contrib">
    <available property="ant-contrib.available"
               resource="${ant-contrib.resource}">
	 <classpath refid="ant-contrib.classpath" />
    </available>
  </target>

  <target name="-set.junit.task.available" unless="junit.task.available">
    <available property="junit.task.available"
         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
  </target>

  <target name="-set.junit.logger.task.available" depends="jar-ant"
        unless="junit.logger.task.available">
    <available property="junit.logger.task.available"
         classname="org.lockss.ant.LoggingJUnitTask" />
    <taskdef name="junit1" classname="org.lockss.ant.LoggingJUnitTask" >
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
    </taskdef>
  </target>

  <target name="-set.wrap.task.available" unless="wrap.task.available">
     <available property="wrap.task.available" classname="org.lockss.ant.WrapTask"/>
     <taskdef name="wrap" classname="org.lockss.ant.WrapTask">
       <classpath>
         <path refid="test.run.classpath" />
      </classpath>
    </taskdef>
  </target>

  <target name="-set.junit.available" unless="junit.available">
    <available property="junit.available"
               classname="junit.framework.Test" />
  </target>

  <target name="-using-junit1"
          depends="-set.junit.available,-set.junit.task.available,-set.junit.logger.task.available"/>

  <!-- ==================================================================== -->
  <!--  Public tasks -->
  <!-- ==================================================================== -->
  <target name="clean" depends="clean-tempbuild,clean-tools"
   description="Delete all generated files and dirs" >
    <delete dir="${classes}" quiet="true"/>
    <delete dir="${test.classes}" quiet="true"/>
    <delete dir="${ant.classes}" quiet="true"/>
    <delete dir="${depend.cache}" quiet="true"/>
    <delete dir="${test.results}" quiet="true"/>
    <delete dir="${javadoc}" quiet="true"/>
    <delete dir="${test.javadoc}" quiet="true"/>
    <delete file="${lockss.jar}" quiet="true"/>
    <delete file="${lockss.test.jar}" quiet="true"/>
    <delete file="${lockss.ant.jar}" quiet="true"/>
    <delete file="${test.classpath.file}" quiet="true"/>
    <delete file="${production.classpath.file}" quiet="true"/>
    <delete file="${tools.classpath.file}" quiet="true"/>
    <delete quiet="true" verbose="true">
      <!-- ant-generated files that can get left around if build is aborted -->
      <fileset dir="${basedir}" includes="files?* junit?*.properties"/>
    </delete>
  </target>

  <target name="clean-tempbuild"
   description="Delete temporary build dirs" >
    <delete dir="${temp.build}" quiet="true"/>
  </target>

  <!-- The tools jar has a separate cleaning target because
       it requires a separate JDK 1.4 compilation -->
  <target name="clean-tools"
          description="Cleans tools jars">
    <delete dir="${generated.src}" quiet="true"/>
    <delete dir="${tools.classes}" quiet="true"/>
    <delete dir="${tools.test.classes}" quiet="true"/>
    <delete dir="${generated.classes}" quiet="true"/>
    <delete dir="${generated.test.classes}" quiet="true"/>
    <delete dir="${instrumented}" quiet="true"/>
    <delete file="${lockss.tools.jar}" quiet="true"/>
    <delete file="${lockss.tools.test.jar}" quiet="true"/>
    <delete file="${lockss.generated.jar}" quiet="true"/>
    <delete file="${lockss.generated.test.jar}" quiet="true"/>
  </target>

  <!-- ==================================================================== -->
  <target name="depend-lockss" depends="prepare"
   description="Process Java dependencies in LOCKSS classes" >
    <depend srcdir="${src}"
           destdir="${classes}"
	   cache="${depend.cache}"
	   closure="false"
           >
       <include name="**/*.java"/>
    </depend>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-lockss" depends="prepare"
   description="Compile the LOCKSS classes" >
    <javac srcdir="${src}"
           destdir="${classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="compile.classpath" />
       <include name="**/*.java"/>
    </javac>
    <copy todir="${classes}" >
       <fileset dir="${src}" >
          <include name="**/*.xml"/>   <!-- mapping files in various dirs -->
          <include name="**/*.props"/>
          <include name="commons-logging.properties"/>
          <include name="org/lockss/htdocs/**/*"/>
       </fileset>
    </copy>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-tests" depends="jar-lockss,prepare.test"
   description="Compile the LOCKSS test classes" >
    <javac srcdir="${test.src}"
           destdir="${test.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="test.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
    <copy todir="${test.classes}" >
       <fileset dir="${test.src}" >
          <include name="**/*.xml"/>   <!-- mapping files in various dirs -->
       </fileset>
    </copy>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-ant" depends=""
   description="Compile the LOCKSS ant extensions" >
    <mkdir dir="${ant.classes}" />
    <javac srcdir="${ant.src}"
           destdir="${ant.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="ant.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-tools"
          depends="jar-lockss,-check-if-1.4"
          description="Compile the LOCKSS tools">
    <mkdir dir="${tools.classes}" />
    <javac srcdir="${tools.src}"
           destdir="${tools.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="tools.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
    <copy todir="${tools.classes}" >
       <fileset dir="${tools.src}" >
          <include name="**/*.xml"/>   <!-- mapping files in various dirs -->
          <include name="**/images/*"/>
       </fileset>
    </copy>
  </target>
  <target name="compile-generated"
          depends="prepare,generate-plugin-wrapper,jar-lockss"
          description="Compile generated classes">
    <mkdir dir="${generated.classes}"/>
    <javac srcdir="${generated.src}"
           destdir="${generated.classes}"
	   debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="generated.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
  </target>
  <target name="compile-tools-tests" depends="jar-tools,jar-tests"
   description="Compile the LOCKSS test classes for tools" >
    <mkdir dir="${tools.test.classes}" />
    <javac srcdir="${tools.test.src}"
           destdir="${tools.test.classes}"
	   debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="tools.test.compile.classpath" />
       <include name="**/*.java"/>
   </javac>
  </target>

    <target name="compile-generated-tests" depends="jar-generated,jar-tests"
   description="Compile the LOCKSS test classes for generated" >
    <mkdir dir="${generated.test.classes}" />
    <javac srcdir="${generated.test.src}"
           destdir="${generated.test.classes}"
	   debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           listfiles="${listfiles}"
           >
       <classpath refid="generated.test.compile.classpath" />
       <include name="**/*.java"/>
   </javac>
  </target>

  <!-- ==================================================================== -->
  <target name="-load-build-info" depends="build-info">
    <!-- Load the build-info file, so can use timestamp prop
         in javadoc targets -->
    <property file="${build.info.file}" />
  </target>

  <!-- ==================================================================== -->
  <target name="build-info-if-needed">
    <!-- Set jar.is.up.to.date if jar doesn't need to be rebuilt.  Otherwise,
         build-info will write prop file, causing a new jar to be built, when
         nothing has really changed.  Isn't there an easier way to do this? -->
    <uptodate property="jar.is.up.to.date" targetfile="${lockss.jar}">
      <srcfiles dir="${classes}" />
    </uptodate>
  </target>

  <!-- ==================================================================== -->
  <target name="build-info" depends="build-info-if-needed"
       unless="jar.is.up.to.date">
    <!--  The prop names used here are also known to
          org.lockss.util.BuildInfo class -->
    <propertyfile comment="Build Information"
                  file="${build.info.file}">
      <entry key="build.date"
             type="date"
             pattern="EEEE MMM dd, yyyy"
             value="now"/>
      <entry key="build.time"
             type="date"
             pattern="kk:mm:ss"
             value="now"/>
      <entry key="build.timestamp"
	     type="date"
	     pattern="dd-MMM-yy' 'HH:mm:ss"
	     value="now"/>
      <entry key="build.user.name" value="${user.name}"/>
      <entry key="build.host" value="${env.HOSTNAME}"/>
      <entry key="build.releasename" value="${releasename}"/>
      <entry key="build.cvs.tag" value="$Name$"/>
    </propertyfile>

    <!-- Build file with CVS revision info for all files -->

    <!-- Concatenate all CVS/Entries files.   Not ideal, as dir names
         must be inferred, but it's fast, done entirely within Ant,
         and includes files that don't have cvs Id line -->
    <concat destfile="${build.filerev.file}">
       <fileset dir="${src}" includes="**/CVS/Entries" defaultexcludes="no" />
    </concat>
<!--
 Some other ways to do this.
     Extract cvs Id lines from all files, with shell command:
     sh -c "find . -type f -print0 | xargs -0 '"'egrep '\$Id(:.*)?\$'"'"
    <exec executable="sh" dir="${src}" output="${build.filerev.file}">
      <arg line="-c &quot;find . -type f  -print0 | xargs -0 egrep &apos;&quot;&apos;\$Id(:.*)?\$&apos;&quot;&apos;&quot;" />
    </exec>
     Similar, slightly faster:
     sh -c "egrep -r '"'\$Id(:.*)?\$'"'"
    <exec executable="sh" dir="${src}" output="${build.filerev.file}">
      <arg line="-c &quot;egrep -r &apos;&quot;&apos;\$Id(:.*)?\$&apos;&quot;&apos; .&quot;" />
    </exec>
     Concatenate CVS/Entries files, with header for each:
     sh -c "find . -name CVS -type d -exec echo {} \; -exec grep '^/' {}/Entries \;"
    <exec executable="sh" dir="${src}" output="${build.filerev.file}">
      <arg line="-c &quot;find . -name CVS -type d -exec echo Dir \{\} \; -exec grep &apos;^/&apos; {}/Entries \;&quot;" />
    </exec>
-->
  </target>

  <!-- ==================================================================== -->
  <target name="jar-lockss" depends="compile-lockss,build-info"
   description="Jar the LOCKSS classes" >
    <jar jarfile="${lockss.jar}" basedir="${classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-tests" depends="compile-tests"
   description="Jar the LOCKSS test classes" >
    <jar jarfile="${lockss.test.jar}" basedir="${test.classes}" >
       <include name="**/" />
    </jar>
    <!-- Write test classpath to a file, so scripts can get it -->
    <pathconvert refid="test.run.classpath" property="tmp.test.clspth"
      targetos="${detected.os}" />
    <echo message="${tmp.test.clspth}" file="${test.classpath.file}"/>
    <!-- Write run classpath to a different file, for package build -->
    <pathconvert refid="test.run.classpath" property="tmp.run.clspth"
      targetos="${detected.os}">
      <!-- entity codes below are open and close curly brace -->
      <map from="${basedir}/lib" to="$&#x07b;JAVA.LIB.PATH&#x07d;" />
    </pathconvert>
    <echo message="${tmp.run.clspth}" file="${production.classpath.file}"/>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-tools" depends="compile-tools"
   description="Jar the tools classes" >
    <jar jarfile="${lockss.tools.jar}" basedir="${tools.classes}" >
       <include name="**/" />
    </jar>
    <!-- Write tools classpath to a file, so scripts can get it -->
    <pathconvert refid="tools.run.classpath" property="tmp.tools.clspth"
      targetos="${detected.os}">
      <!-- entity codes below are open and close curly brace -->
      <map from="${basedir}/lib" to="$&#x07b;JAVA.LIB.PATH&#x07d;" />
    </pathconvert>
    <echo message="${tmp.tools.clspth}" file="${tools.classpath.file}"/>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-tools-tests" depends="compile-tools-tests"
   description="Jar the tools test classes" >
    <jar jarfile="${lockss.tools.test.jar}" basedir="${tools.test.classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-generated" depends="compile-generated"
   description="Jar the generated classes" >
    <jar jarfile="${lockss.generated.jar}" basedir="${generated.classes}" >
       <include name="**/*" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-generated-tests" depends="compile-generated-tests"
   description="Jar the generateds test classes" >
    <jar jarfile="${lockss.generated.test.jar}" basedir="${generated.test.classes}" >
       <include name="**/*"/>
   </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-ant" depends="compile-ant"
   description="Jar the LOCKSS ant extensions" >
    <jar jarfile="${lockss.ant.jar}" basedir="${ant.classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="djar" depends="depend-lockss,jar-lockss"
   description="depend, compile and jar LOCKSS" >
  </target>

  <!-- ==================================================================== -->
  <target name="javadoc" depends="compile-lockss,-load-build-info"
   description="Build the LOCKSS javadoc">
    <mkdir dir="${javadoc}"/>
    <!-- Old files can result in misleading stuff in the docs.  Since
         javadoc regenerates everything from scratch each time anyway,
	 ensure the directory is cleared out first.  -->
    <delete>
      <fileset dir="${javadoc}" defaultexcludes="no" />
    </delete>
    <property name="javadoc.header"
              value="Built ${build.timestamp} on ${build.host}" />
    <javadoc
	     failonerror="true"
             packagenames="org.lockss.*"
             sourcepath="${src}"
             destdir="${javadoc}"
             author="${author}"
             version="${version}"
	     access="protected"
             windowtitle="LOCKSS API"
             doctitle="LOCKSS"
             verbose="false"
             overview="${src}/overview.html"
             header="${javadoc.header}"
             bottom="Copyright &#169; 2000-2003 Board of Trustees of Leland Stanford Jr. University, all rights reserved.">
       <classpath refid="compile.classpath" />
    </javadoc>
  </target>

  <!-- ==================================================================== -->
  <target name="javadoc-test" depends="compile-tests,-load-build-info"
   description="Build the javadoc for the test hierarchy">
    <!-- Using 'packagenames="org.lockss.*"' as above results in the doc set
	 including all the referenced classes in those packages, but with
	 none of the javadoc comments, because the source isn't available.
	 So the test classes are included individually instead, which
	 results in no package index.
	 An alternative would be to fully include the non-test classes,
	 by putting them on the sourcepath.  -->
    <mkdir dir="${test.javadoc}"/>
    <!-- Old files can result in misleading stuff in the docs.  Since
         javadoc regenerates everything from scratch each time anyway,
	 ensure the directory is cleared out first.  -->
    <delete>
      <fileset dir="${test.javadoc}" defaultexcludes="no" />
    </delete>
<!--  packagenames="org.lockss.test.*" -->
    <property name="javadoc.test.header"
              value="Built ${build.timestamp} on ${build.host}" />
    <javadoc
	     failonerror="true"
             sourcepath="${test.src}"
             destdir="${test.javadoc}"
             author="${author}"
             version="${version}"
	     access="protected"
             windowtitle="LOCKSS test classes API"
             doctitle="LOCKSS test"
             header="${javadoc.test.header}"
             bottom="Copyright &#169; 2000-2003 Board of Trustees of Leland Stanford Jr. University, all rights reserved.">
<!--         <fileset dir="${test.src}" includes="**/*.java"/> -->
       <fileset dir="${test.src}" includes="**/*.java" excludes="**/Test*.java"/>
       <classpath refid="test.compile.classpath" />
    </javadoc>
  </target>

  <target name="generate-plugin-wrapper"
          depends="jar-ant,jar-tools,-set.wrap.task.available">
    <mkdir dir="${generated.src}/${wrapper.path}"/>
    <wrap srcdir="${tobewrapped.src}"
        template="${plugin.wrapper.template}"
	destdir="${generated.src}/${wrapper.path}"
	interface="true" >
     <fileset dir="${tools.src}/org/lockss/doclet"
              includes="WrapperGenerator.java"/>
     <fileset dir="${ant.src}/org/lockss/ant" includes="WrapTask.java" />
     <classpath refid="tools.run.classpath" />
    </wrap>
  </target>

  <!-- ==================================================================== -->
  <target name="jdftp" depends="javadoc,javadoc-test,jdftp1"
   description="Build javadoc and invoke script to copy it somewhere.">
  </target>

  <target name="jdftp1" >

    <property name="doctar" value="/tmp/lockss-javadoc.tgz" />
    <property name="script" value="lockss-jdftp" />

    <tar destfile="${doctar}" compression="gzip">
      <tarfileset dir="${javadoc}" prefix="daemon" />
      <tarfileset dir="${test.javadoc}" prefix="test" />
    </tar>

    <echo message="Invoking '${script} ${doctar}'"/>
    <exec executable="${script}" dir="${basedir}"
          failonerror="true" >
      <arg line="${doctar}"/>
    </exec>
    <delete file="${doctar}" quiet="true"/>
  </target>

  <!-- ==================================================================== -->
  <target name="index" depends="jar-tools"
   description="Print an index for a .java file">
    <tempfile property="index.file" destdir="${java.io.tmpdir}"
       prefix="index"/>
    <property name="copies" value="1" />
    <basename property="indexname" file="${file}" suffix=".java" />
    <javadoc
       sourcepath="${src}"
       sourcefiles="${file}"
       destdir="${javadoc}"
       failonerror="true"
       access="private">
      <doclet name="org.lockss.doclet.Indexer"
              path="${lockss.tools.jar}">
	<param name="-o" value="${index.file}" />
  	<param name="-dots" value="0" />
      </doclet>
      <classpath refid="compile.classpath" />
    </javadoc>
    <apply executable="a2ps" dir="${basedir}"
           parallel="true">
      <arg value="-3"/>
      <arg value="--header="/>
      <arg value="--center-title=${indexname} Index"/>
      <arg value="--footer=${file}"/>
      <arg value="-l"/>
      <arg value="50"/>
      <arg value="--copies=${copies}"/>
      <arg value="--prologue=matrix"/>
<!--        <arg value="-o"/> -->
<!--        <arg value="foo.ps"/> -->
      <arg value="${index.file}"/>
      <fileset dir="${basedir}" excludes="* **/*"/>
    </apply>
     <delete file="${index.file}" quiet="true"/>
  </target>

  <!-- ==================================================================== -->
  <target name="print"
   description="Print a .java file">
    <property name="copies" value="1" />
    <apply executable="a2ps" dir="${basedir}"
           relative="true"
           parallel="true">
      <arg value="-C"/>
      <arg value="--header="/>
      <arg value="--copies=${copies}"/>
      <arg value="-S Collate:true"/>
<!--        <arg value="-o"/> -->
<!--        <arg value="foo.ps"/> -->
      <arg value="${file}"/>
      <fileset dir="${basedir}" excludes="* **/*"/>
    </apply>
<!--       <delete file="${index.file}" quiet="true"/> -->
  </target>

  <!-- ==================================================================== -->
<!--  Once we have more files this will fail due to command line length.
      It should pipe the names to etags as in:
      find . -name \*.java -print | etags -t -S - -->
  <target name="tags" depends="prepare"
   description="Build an emacs TAGS file" >
    <apply executable="etags" dir="${basedir}"
           relative="true"
           parallel="true">
      <arg value="-S"/>
<!--        <arg value="-o"/> -->
<!--        <arg file="${etags.filename}"/> -->
      <fileset dir="${basedir}" includes="**/*.java"/>
    </apply>
    <property name="tagsfile" location="TAGS" />
    <echo>Tags written to ${tagsfile}</echo>
  </target>

  <!-- ==================================================================== -->
  <target name="javap" depends="jar-tests"
   description="Disassemble the class named by class prop, with additional args in args prop" >
    <property name="args" value="" />
    <pathconvert refid="test.run.classpath" property="tmp.test.clspth"
      targetos="${detected.os}" />
    <exec executable="javap" dir="${basedir}"
          failonerror="true" >
      <arg value="-classpath"/>
      <arg value="${tmp.test.clspth}"/>
      <arg line="${args}" />
      <arg value="${class}"/>
    </exec>
  </target>

  <!-- ==================================================================== -->
  <target name="proxy" depends="jar-tests"
   description="Run the proxy" >
    <java classname="org.lockss.proxy.StartProxy" fork="true">
       <classpath refid="test.run.classpath" />
    </java>
  </target>

  <!-- ==================================================================== -->
  <target name="run-class" depends="jar-tests,check.class.arg"
   description="Run a class named by class prop, with args in args prop" >
    <!-- default args empty if not supplied on command line -->
    <property name="args" value="" />
    <java classname="${class}" fork="true">
       <classpath refid="test.run.classpath" />
       <arg line="${args}" />
       <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
       <sysproperty key="java.library.path" value="${test.native}"/>
    </java>
  </target>
 <!-- ==================================================================== -->
  <target name="run-tool"
   depends="-check-if-1.4,jar-tools-tests,check.class.arg"
   description="Run a tools class named by class prop, with args in args prop" >
    <!-- default args empty if not supplied on command line -->
    <property name="args" value="" />
    <java classname="${class}" fork="true">
       <classpath refid="tools.test.run.classpath" />
       <arg line="${args}" />
       <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
    </java>
  </target>

  <!-- ==================================================================== -->
  <target name="test-all"
   depends="test-unit,test-func"
   description="Run all unit tests and functional tests" >
  </target>

  <!-- ==================================================================== -->
  <target name="test-unit"
   depends="prepare.run.test,check.junit,jar-tests"
   description="Run all unit tests (test/src/**/Test*.class)" >
    <echo>
Test results in ${test.results}
    </echo>
    <property name="include" value="**/Test*.java" />
    <delete file="${test.results}/*" quiet="true" />
    <junit1 fork="no" printsummary="yes"
         haltonfailure="${halt}" failureproperty="failed"
         filtertrace="${filtertrace}" showoutput="${showoutput}">
     <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="${include}" />
          <exclude name="${exclude}" />
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
    <fail if="failed" message="Test(s) failed" />
  </target>

  <!-- ==================================================================== -->
  <target name="test-func"
   depends="prepare.run.test,check.junit,jar-tests"
   description="Run all functional tests (test/src/**/Func*.class)" >
    <echo>
Test results in ${test.results}
    </echo>
    <delete file="${test.results}/*" quiet="true" />
    <junit1 fork="no" printsummary="yes"
         haltonfailure="${halt}" failureproperty="failed"
         filtertrace="${filtertrace}" showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/Func*.java" />
          <exclude name="${exclude}" />
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
    <fail if="failed" message="Test(s) failed" />
  </target>

  <!-- ==================================================================== -->
<!-- doesn't work
  <target name="test-all-debug"
   depends="prepare.test,check.junit,jar-tests"
   description="Run all junit tests (test/src/**/Test*.class), under the debugger" >
    <echo>
Test results in ${test.results}
    </echo>
    <delete file="${test.results}/*" quiet="true" />
    <junit fork="yes" printsummary="yes" haltonerror="yes" haltonfailure="yes"
      jvm="jdb" >
      <batchtest fork="yes" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/Test*.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
    </junit>
  </target>
-->
  <!-- ==================================================================== -->
  <target name="test-class"
   depends="prepare.run.test,check.class.arg,check.junit,jar-tests,jar-ant,jar-tests"
   description="Run all tests for a single class, named by the 'class' property" >
    <echo>Running tests for class ${class}</echo>
    <junit1 fork="no" printsummary="yes" haltonerror="yes" haltonfailure="yes"
        showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/*.java" />
          <exclude name="${exclude}" />
	  <custom classname="org.lockss.ant.ClassTestSelector">
	    <classpath>
	      <path refid="test.run.classpath" />
	    </classpath>
	    <param name="class" value="${class}" />
	  </custom>
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="false" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
  </target>
  <!-- ==================================================================== -->
  <target name="test-one"
   depends="prepare.run.test,check.class.arg,check.junit,jar-tests"
   description="Run a single test class, named by the 'class' property" >
    <junit1 fork="no" printsummary="yes" haltonerror="yes" haltonfailure="yes"
         filtertrace="${filtertrace}"
         showoutput="${showoutput}">
      <jvmarg value="-Xmx128m"/>  <!-- no effect unless both fork=yes -->
      <test fork="${fork}" name="${class}" />
      <formatter type="plain" usefile="false" />
      <classpath>
 	 <path refid="one.test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
  </target>

  <!-- ==================================================================== -->
  <target name="test-tools"
   depends="-check-if-1.4,-using-junit1,jar-tools-tests"
   description="Run all tools tests" >
    <echo>
Test results in ${tools.test.results}
    </echo>
    <mkdir dir="${tools.test.results}"/>
    <delete file="${tools.test.results}/*" quiet="true" />
    <junit1 fork="no" printsummary="yes"
         haltonfailure="${halt}" failureproperty="failed"
         filtertrace="${filtertrace}" showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${tools.test.results}">
        <fileset dir="${tools.test.src}">
          <include name="**/Test*.java" />
	  <include name="**/Func*.java"/>
       </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="tools.test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
    <fail if="failed" message="Test(s) failed" />
  </target>

    <target name="test-generated"
   depends="-check-if-1.4,-using-junit1,jar-generated-tests"
   description="Run all tests of generated" >
    <echo>
Test results in ${tools.test.results}
    </echo>
    <mkdir dir="${generated.test.results}"/>
    <delete file="${generated.test.results}/*" quiet="true" />
    <junit1 fork="no" printsummary="yes"
         haltonfailure="${halt}" failureproperty="failed"
         filtertrace="${filtertrace}" showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${generated.test.results}">
        <fileset dir="${generated.test.src}">
          <include name="org/lockss/plugin/**/Test*.java" />
	  <include name="org/lockss/plugin/**/Func*.java"/>
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="generated.test.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
    <fail if="failed" message="Test(s) failed" />
  </target>

  <target name="test-tools-etal"
          description="Test the tools and generated classes"
	  depends="test-tools,test-generated">
  </target>

  <!-- ==================================================================== -->
  <target name="rebuild-all"
   depends="clean,test-all,javadoc,javadoc-test"
   description="Clean, build and test all, and javadoc." >
  </target>

  <target name="rebuild-tools"
          depends="clean-tools,-check-if-1.4,test-tools-etal"
	  description="Clean, build, and test tools">
  </target>

  <target name="rebuild-all-with-tools"
          depends="rebuild-all,rebuild-tools"
	  description="Clean, build, test daemon and tools">
  </target>

  <!-- ==================================================================== -->
  <!-- Set up cvs.co.tag from cvstag arg if set, or cvs tag under which
       this file was checked out -->
  <target name="get.cvs.tag" depends="check.contrib" >
   <property name="cvstag" value="" />
   <if>
    <equals arg1="${cvstag}" arg2="" />
    <then>
      <!-- cvs.name.tag will get a value that looks like either
	   "$ Name: branch_tag $" (or "$ Name: $" or $ Name$ for no tag).
           (Except that there is no space between the $ and Name.)
           The prefix and suffix are removed to yield the actual tag.
           (The \ before Name in the pattern is to prevent cvs from expanding
           the keyword on that line.) -->
      <property name="cvs.name.tag" value="$Name$"/>
      <propertyregex property="cvs.co.tag"
         input="${cvs.name.tag}"
         regexp="\$\Name: *([^ ]*) *\$"
         replace="\1"
         defaultValue="" />
    </then>
    <else>
      <property name="cvs.co.tag" value="${cvstag}"/>
    </else>
   </if>
  </target>

  <!-- ==================================================================== -->
  <target name="checkout-and-build"
     depends="check.contrib,get.cvs.tag"
     description="Checkout current cvs into temp dir, build and test all." >
   <property name="cvstag" value="" />
   <mkdir dir="${temp.build}" />
   <tempfile property="temp.build.dir" destdir="${temp.build}" prefix="build"/>
   <mkdir dir="${temp.build.dir}" />
   <property name="temp.proj.dir" value="${temp.build.dir}/${cvs.project}" />

   <trycatch property="recursive.error.msg">
    <try>
     <if>
      <equals arg1="${cvs.co.tag}" arg2="" />
      <then>
       <echo>Checking out MAIN BRANCH
  to ${temp.build.dir}</echo>
      </then>
      <else>
       <echo>Checking out BRANCH TAG: ${cvs.co.tag}
  to ${temp.build.dir}</echo>
      </else>
     </if>
     <if>
      <isfalse value="${nocvs}" />
      <then>
	<cvs command="-z3 -Q checkout" package="lockss-daemon"
	     dest="${temp.build.dir}" tag="${cvs.co.tag}" failonerror="true"/>
      </then>
      <else>
	<echo>No cvs, copying from ${basedir}</echo>
	<mkdir dir="${temp.proj.dir}" />
	<copy todir="${temp.proj.dir}" >
	  <fileset dir="${basedir}" >
	    <include name="build.xml"/>
	    <include name="lib/"/>
	    <include name="src/"/>
	    <include name="test/src/"/>
	    <include name="ant/src/"/>
	    <include name="doclet/"/>
	    <include name="tools/"/>
	    <include name="generated/test/"/>
	    <exclude name="**/classes/**"/>
	  </fileset>
	</copy>
      </else>
     </if>
     <echo>Building and testing in ${temp.build.dir}</echo>
<!--
	Would prefer to run build in separate jvm, but ant task doesn't
	support the fork= attribute.  Don't want to pass most properties
	from this invocation, as they point to the current build dir,
	not the one under tempduild.  But we need to arrange for it to not
	try to redefine tasks that were defined in the outer invocation.
        Passing in ant-contrib.loaded accomplishes that, but isn't really
        right.
-->
     <ant dir="${temp.proj.dir}"
	   target="test-all"
	   inheritAll="false">
       <property name="ant-contrib.loaded" value="${ant-contrib.loaded}" />
     </ant>
     <echo>Build was successful, deleting "${temp.build.dir}"</echo>
     <delete dir="${temp.build.dir}" quiet="true"/>
     <property name="checkout.and.build.worked" value="true" />
    </try>
    <catch>
     <echo>*** Failed temp checkout left in
*** ${temp.build.dir}
*** Use clean-tempbuild target to delete it.</echo>
     <fail message="Recursive build failed."/>
    </catch>
   </trycatch>
  </target>

  <!-- ==================================================================== -->
  <target name="javah-test" depends="jar-tests"
   description="Generate headers for native code in test/" >
     <javah destdir="${test.native}">
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>
      <class name="org.lockss.test.DebugUtils" />
     </javah>
  </target>

  <!-- ==================================================================== -->
  <target name="native-test" depends="javah-test"
   description="Compile and link native code in test/" >
     <exec dir="${test.native}" executable="make" />
  </target>

  <!-- ==================================================================== -->
  <target name="pre-commit-test" depends="rebuild-all"
   description="Synonym for rebuild-all." />

  <target name="post-commit-test" depends="checkout-and-build"
   description="Synonym for checkout-and-build." />

  <!-- ==================================================================== -->
  <target name="check.class.arg" unless="class.arg.specified" >
    <fail message="The &quot;class&quot; arg must be specified with -Dclass=&lt;classname&gt;" />
  </target>

  <target name="check.junit"
   depends="check.junit.task,check.junit.jar">
  </target>

  <target name="check.junit.task" unless="junit.task.available" >
    <fail message="
 The &lt;junit&gt; task is not available.
 You need to install the Ant optional tasks .jar in the [ant]/lib directory.
 Please see Ant's JUnit task doc for more information"   />
  </target>

  <target name="check.junit.jar" unless="junit.available" >
    <fail message="
  The junit .jar is not in the Ant class path.
  You need to place a copy of junit.jar on the classpath.
  Please see Ant's JUnit task doc for more information"
    />
  </target>

  <target name="check.contrib"
   depends="prepare.contrib,load.ant-contrib" />

  <target name="load.ant-contrib" unless="ant-contrib.loaded" >
   <!--  Non-standard tasks -->
   <taskdef resource="${ant-contrib.resource}">
    <classpath refid="ant-contrib.classpath"/>
   </taskdef>
   <property name="ant-contrib.loaded" value="true" />
  </target>

<!--
  <target name="check.ant-contrib.jar" unless="ant-contrib.available" >
  <taskdef resource="${ant-contrib.resource}">
   <classpath refid="ant-contrib.classpath"/>
  </taskdef>

    <fail message="You need to place a copy of ant-contrib-0.1.jar in ${lib}." />
  </target>
-->

  <!-- ==================================================================== -->
  <target name="jcover"
   depends="prepare.run.test,check.junit,jar-tests"
   description="Run a set of test classes through jcoverage, named by the 'include' property." >
    <property name="jcoverage.ser" value="jcoverage.ser" />
    <property name="tests" value="${include}Test*" />
    <taskdef classpath="${jcoverage.jar}" resource="tasks.properties"/>
    <delete file="${jcoverage.ser}" quiet="true" />
    <delete dir="${instrumented}" quiet="true" />
    <instrument todir="${instrumented}">
      <classpath refid="jcover.run.classpath" />
      <fileset dir="${classes}">
         <include name="${include}"/>
         <exclude name="${exclude}"/>
      </fileset>
    </instrument>
    <junit1 fork="no" printsummary="yes"
         haltonfailure="${halt}" failureproperty="failed"
         filtertrace="${filtertrace}" showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="${tests}"/>
          <exclude name="${exclude}"/>
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
        <path location="${instrumented}"/>
        <path refid="jcover.run.classpath" />
      </classpath>
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>

    <report format="html" destdir="${test.results}" srcdir="${src}">
       <classpath refid="jcover.run.classpath" />
       <instrumentation file="${jcoverage.ser}"/>
    </report>
<!--     <delete file="${jcoverage.ser}" quiet="true" /> -->
  </target>

</project>
