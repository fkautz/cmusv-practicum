<!--
========================================================================
 $Id$
 Ant build file for LOCKSS daemon
========================================================================
Copyright (c) 2000-2003 Board of Trustees of Leland Stanford Jr. University,
all rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of Stanford University shall not
be used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from Stanford University.
========================================================================

-->

<project name="LOCKSS Gamma" default="test-all" basedir=".">

<description>
Args:
  -Dargs="args ..."        Supply cmd line args to run-class
  -Dclass=pack.age.Class   Specify class for test-one, test-class, run-class
  -Dcvstag=tag             Cvs tag to checkout for post-commit-test
  -Dexclude=path           Exclude matching tests.
  -Dfile=path/to/file      Specify file for print or index.
                              File is relative to project base dir
  -Dfork=true              Run each test in a separate jvm.
  -Dforkc=true             Run compiler in a separate jvm.
  -Dinclude=path           Include matching tests.
  -Dkeeptempfiles=true     Don't delete temp files after tests run.
  -Dloglevel=debug         Set default log level to debug for
                              test-all, test-one, test-class, run-class.
  -Dlogtarget=Class        Set default log target.
  -Dshowoutput=yes         With test-one, show System.err output as it happens.
  -Dtimeout=msecs          Override the default test failure timeout.
</description>

  <!-- Defaults -->
  <property name="loglevel" value="" />
  <property name="showoutput" value="no" />
  <property name="timeout" value="" />
  <property name="keeptempfiles" value="" />
  <property name="fork" value="no" />
  <property name="forkc" value="yes" />
  <property name="exclude" value="" />


  <property environment="env"/>
  <!--  Ignore system classpath, to ensure consistent builds -->
  <property name="build.sysclasspath" value="ignore" />

  <!--  CVS-related -->
  <property name="cvs.project"    value="lockss-gamma" />

  <!--  Directories -->
  <property name="java.lib"       value="${env.JAVA_HOME}/lib" />

  <property name="src"            value="${basedir}/src" />
  <property name="classes"        value="${basedir}/classes" />
  <property name="lib"            value="${basedir}/lib"/>
  <property name="test"           value="${basedir}/test"/>
  <property name="test.src"       value="${test}/src"/>
  <property name="test.classes"   value="${test}/classes" />
<!--    <property name="test.lib"       value="${test}/lib"/> -->
  <property name="test.lib"       value="${lib}"/>
  <property name="test.results"   value="${test}/results"/>
  <property name="test.native"    value="${test}/native"/>

  <property name="ant"           value="${basedir}/ant"/>
  <property name="ant.src"       value="${ant}/src"/>
  <property name="ant.classes"   value="${ant}/classes" />

  <property name="doclet"           value="${basedir}/doclet"/>
  <property name="doclet.src"       value="${doclet}/src"/>
  <property name="doclet.classes"   value="${doclet}/classes" />

  <property name="javadoc"        value="${basedir}/javadoc"/>
  <property name="test.javadoc"   value="${test}/javadoc"/>
  <property name="depend.cache"   value="${basedir}/.depend"/>
  <property name="temp.build"     value="${basedir}/tempbuild"/>

  <!--  Jars -->
  <property name="castor.jar"     value="${lib}/castor-0.9.4.1-xml.jar"/>
  <property name="xerces.jar"     value="${lib}/xercesImpl.jar"/>
  <property name="xmlparser.jar"  value="${lib}/xmlParserAPIs.jar"/>
<!--  <property name="jetty.jar"     value="${lib}/org.mortbay.jetty.jar"/> -->
  <property name="jetty.jar"      value="${lib}/org.mortbay.jetty-jdk1.2.jar"/>
  <property name="jettytools.jar" value="${lib}/org.mortbay.tools.jar"/>
  <property name="servlet.jar"    value="${lib}/javax.servlet.jar"/>
  <property name="jaxp.jar"       value="${lib}/javax.xml.jaxp.jar"/>
<!--    <property name="xml.jar"  value="${lib}/org.apache.crimson.jar"/> -->
<!--    <property name="regexp.jar"     value="${lib}/gnu-regexp.jar"/> -->
  <property name="regexp.jar"     value="${lib}/gnu-regexp-1.1.4.jar"/>
  <property name="commons.collections.jar"
  				  value="${lib}/commons-collections.jar"/>
  <property name="junit.jar"      value="${test.lib}/junit.jar"/>
  <property name="junit.addons.jar" value="${test.lib}/junit-addons.jar"/>
  <property name="tools.jar"      value="${java.lib}/tools.jar"/>

  <property name="lockss.jar"     value="${lib}/lockss.jar"/>
  <property name="lockss.test.jar" value="${test.lib}/lockss-test.jar"/>
  <property name="lockss.ant.jar" value="${lib}/lockss-ant.jar"/>
  <property name="lockss.doclet.jar" value="${lib}/lockss-doclet.jar"/>

  <property name="ant-contrib.jar"      value="${lib}/ant-contrib-0.1.jar"/>

  <!--  Files -->
  <property name="test.classpath.file" value="${test}/test-classpath"/>
  <property name="production.classpath.file" value="${lib}/run-classpath"/>
  <!--  This path is also known to org.lockss.util.BuildInfo class -->
  <property name="build.info.file"
                     value="${classes}/org/lockss/htdocs/build.properties"/>
  <property name="build.filerev.file"
                     value="${classes}/revision-info"/>

  <property name="ant-contrib.resource"
                          value="net/sf/antcontrib/antcontrib.properties"/>

  <!--  Compiler options -->
  <property name="javac.debug"             value="on" />
  <property name="javac.optimize"          value="off" />
  <property name="javac.deprecation"       value="true" />

  <!--  Classpaths -->
  <path id="compile.classpath">
    <pathelement path="${regexp.jar}" />
    <pathelement path="${commons.collections.jar}" />
    <pathelement path="${jetty.jar}" />
    <pathelement path="${jettytools.jar}" />
    <pathelement path="${servlet.jar}" />
    <pathelement path="${castor.jar}" />
    <pathelement path="${xerces.jar}" />
    <pathelement path="${xmlparser.jar}" />
  </path>

  <path id="run.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${lockss.jar}" />
  </path>

  <path id="test.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${lockss.jar}" />
    <pathelement path="${junit.jar}" />
    <pathelement path="${junit.addons.jar}" />
  </path>

  <path id="test.run.classpath">
    <path refid="test.compile.classpath" />
    <pathelement path="${lockss.test.jar}" />
    <pathelement path="${lockss.ant.jar}" />
  </path>

  <path id="doclet.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${tools.jar}" />
  </path>

  <path id="doclet.run.classpath">
    <pathelement path="${lockss.doclet.jar}" />
  </path>

  <path id="ant-contrib.classpath">
    <pathelement location="${ant-contrib.jar}"/>
  </path>

  <!--  Need ant jar to compile ant extensions, so include ant's classpath -->
  <path id="ant.compile.classpath">
    <path refid="compile.classpath" />
    <pathelement path="${java.class.path}" />
  </path>

  <!-- ==================================================================== -->
  <!--  Setup tasks -->
  <!-- ==================================================================== -->
  <target name="prepare">
    <mkdir dir="${classes}" />
  </target>

  <!-- ==================================================================== -->
  <target name="prepare.test"
      depends="prepare,-set.junit.task.available,-set.junit.available,jar-ant,check.contrib">
    <mkdir dir="${test.classes}" />
    <mkdir dir="${test.results}" />
    <condition property="class.arg.specified">
      <and>
        <isset property="class" />
        <not>
          <equals arg1="${class}" arg2="" trim="true" />
        </not>
      </and>
    </condition>

    <!-- Default logtarget to AntTaskTarget only if not forking tests -->
    <if>
     <isfalse value="${fork}" />
     <then>
      <property name="logtarget" value="org.lockss.util.AntTaskTarget" />
     </then>
     <else>
      <property name="logtarget" value="" />
     </else>
    </if>
  </target>

  <target name="prepare.run.test"
       depends="prepare.test,-set.junit.logger.task.available">
  </target>

  <target name="prepare.contrib">
    <available property="ant-contrib.available" 
               resource="${ant-contrib.resource}">
	 <classpath refid="ant-contrib.classpath" />
    </available>
  </target>

  <target name="-set.junit.task.available" unless="junit.task.available">
    <available property="junit.task.available" 
         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />
  </target>

  <target name="-set.junit.logger.task.available"
        unless="junit.logger.task.available">
    <available property="junit.logger.task.available" 
         classname="org.lockss.ant.LoggingJUnitTask" />
    <taskdef name="junit1" classname="org.lockss.ant.LoggingJUnitTask" >
      <classpath> 
         <path refid="test.run.classpath" />
      </classpath>        
    </taskdef>
  </target>

  <target name="-set.junit.available" unless="junit.available">
    <available property="junit.available" 
               classname="junit.framework.Test" />
  </target>

  <!-- ==================================================================== -->
  <!--  Public tasks -->
  <!-- ==================================================================== -->
  <target name="clean" depends="clean-tempbuild"
   description="Delete all generated files and dirs" >
    <delete dir="${classes}" quiet="true"/>
    <delete dir="${test.classes}" quiet="true"/>
    <delete dir="${ant.classes}" quiet="true"/>
    <delete dir="${doclet.classes}" quiet="true"/>
    <delete dir="${depend.cache}" quiet="true"/>
    <delete dir="${test.results}" quiet="true"/>
    <delete dir="${javadoc}" quiet="true"/>
    <delete dir="${test.javadoc}" quiet="true"/>
    <delete file="${lockss.jar}" quiet="true"/>
    <delete file="${lockss.test.jar}" quiet="true"/>
    <delete file="${lockss.ant.jar}" quiet="true"/>
    <delete file="${lockss.doclet.jar}" quiet="true"/>
    <delete file="${test.classpath.file}" quiet="true"/>
    <delete file="${production.classpath.file}" quiet="true"/>
  </target>

  <target name="clean-tempbuild"
   description="Delete temporary build dirs" >
    <delete dir="${temp.build}" quiet="true"/>
  </target>
  <!-- ==================================================================== -->
  <target name="depend-lockss" depends="prepare"
   description="Process Java dependencies in LOCKSS classes" >
    <depend srcdir="${src}"
           destdir="${classes}"
	   cache="${depend.cache}"
	   closure="false"
           >
       <include name="**/*.java"/>
    </depend>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-lockss" depends="prepare"
   description="Compile the LOCKSS classes" >
    <javac srcdir="${src}"
           destdir="${classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           >
       <classpath refid="compile.classpath" />
       <include name="**/*.java"/>
    </javac>
    <copy todir="${classes}" >
       <fileset dir="${src}" >
          <include name="**/*.xml"/>
          <include name="**/*.props"/>
          <include name="**/*.gif"/>  <!-- should be more selective.  now -->
          <include name="**/*.html"/>  <!-- gets files in gimp-created dirs -->
       </fileset>
    </copy>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-tests" depends="jar-lockss,prepare.test"
   description="Compile the LOCKSS test classes" >
    <javac srcdir="${test.src}"
           destdir="${test.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           >
       <classpath refid="test.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-ant" depends=""
   description="Compile the LOCKSS ant extensions" >
    <mkdir dir="${ant.classes}" />
    <javac srcdir="${ant.src}"
           destdir="${ant.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           >
       <classpath refid="ant.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
  </target>

  <!-- ==================================================================== -->
  <target name="compile-doclet" depends=""
   description="Compile the LOCKSS doclets" >
    <mkdir dir="${doclet.classes}" />
    <javac srcdir="${doclet.src}"
           destdir="${doclet.classes}"
           debug="${javac.debug}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           fork="${forkc}"
           >
       <classpath refid="doclet.compile.classpath" />
       <include name="**/*.java"/>
    </javac>
  </target>

  <!-- ==================================================================== -->
  <target name="build-info-if-needed">
    <!-- Set jar.is.up.to.date if jar doesn't need to be rebuilt.  Otherwise,
         build-info will write prop file, causing a new jar to be built, when
         nothing has really changed.  Isn't there an easier way to do this? -->
    <uptodate property="jar.is.up.to.date" targetfile="${lockss.jar}">
      <srcfiles dir="${classes}" />
    </uptodate>
  </target>

  <!-- ==================================================================== -->
  <target name="build-info" depends="build-info-if-needed"
       unless="jar.is.up.to.date">
    <!--  The prop names used here are also known to
          org.lockss.util.BuildInfo class -->
    <propertyfile comment="Build Information"
                  file="${build.info.file}">
      <entry key="build.date"
             type="date"
             pattern="EEEE MMM dd, yyyy"
             value="now"/>
      <entry key="build.time"
             type="date"
             pattern="kk:mm:ss"
             value="now"/>
      <entry key="build.timestamp"
	     type="date"
	     pattern="dd-MMM-yy' 'HH:mm:ss"
	     value="now"/>
      <entry key="build.user.name" value="${user.name}"/>
      <entry key="build.host" value="${env.HOSTNAME}"/>
      <entry key="build.releasename" value="${releasename}"/>
      <entry key="build.cvs.tag" value="$Name$"/>
    </propertyfile>
    <!-- Put the CVS Id from all the sources files in a file in the jar -->
    <!-- Exec the shell commend:
       sh -c "find . -type f -print0 | xargs -0 '"'egrep '\$Id(:.*)?\$'"'"
         It would be better to find a way to do this within Ant -->
    <exec executable="sh" dir="${src}" output="${build.filerev.file}">
      <arg line="-c &quot;find . -type f -print0 | xargs -0 egrep &apos;&quot;&apos;\$Id(:.*)?\$&apos;&quot;&apos;&quot;" />
    </exec>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-lockss" depends="compile-lockss,build-info"
   description="Jar the LOCKSS classes" >
    <jar jarfile="${lockss.jar}" basedir="${classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-tests" depends="compile-tests"
   description="Jar the LOCKSS test classes" >
    <jar jarfile="${lockss.test.jar}" basedir="${test.classes}" >
       <include name="**/" />
    </jar>
    <!-- Write the classpath to a file, so scripts can get it -->
    <pathconvert refid="test.run.classpath" property="tmp.test.clspth"
      targetos="unix" />
    <echo message="${tmp.test.clspth}" file="${test.classpath.file}"/>
    <pathconvert refid="test.run.classpath" property="tmp.run.clspth"
      targetos="unix">
      <!-- entity codes below are open and close curly brace -->
      <map from="${basedir}/lib" to="$&#x07b;JAVA.LIB.PATH&#x07d;" />
    </pathconvert>
    <echo message="${tmp.run.clspth}" file="${production.classpath.file}"/>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-doclet" depends="compile-doclet"
   description="Jar the doclet classes" >
    <jar jarfile="${lockss.doclet.jar}" basedir="${doclet.classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="jar-ant" depends="compile-ant"
   description="Jar the LOCKSS ant extensions" >
    <jar jarfile="${lockss.ant.jar}" basedir="${ant.classes}" >
       <include name="**/" />
    </jar>
  </target>

  <!-- ==================================================================== -->
  <target name="djar" depends="depend-lockss,jar-lockss"
   description="depend, compile and jar LOCKSS" >
  </target>

  <!-- ==================================================================== -->
  <target name="javadoc" depends="compile-lockss"
   description="Build the LOCKSS javadoc">
    <mkdir dir="${javadoc}"/>
    <!-- Old files can result in misleading stuff in the docs.  Since
         javadoc regenerates everything from scratch each time anyway,
	 ensure the directory is cleared out first.  -->
    <delete>
      <fileset dir="${javadoc}" defaultexcludes="no" />
    </delete>
    <javadoc packagenames="org.lockss.*"
             sourcepath="${src}"
             destdir="${javadoc}"
             author="true"
             version="true"
	     access="protected"
             windowtitle="LOCKSS API"
             doctitle="LOCKSS"
             verbose="false"
	     failonerror="true"
             overview="${src}/overview.html"
             bottom="Copyright &#169; 2002 Board of Trustees of Leland Stanford Jr. University, all rights reserved.">
       <classpath refid="compile.classpath" />
    </javadoc>
  </target>

  <!-- ==================================================================== -->
  <target name="javadoc-test" depends="compile-tests"
   description="Build the javadoc for the test hierarchy">
    <!-- Using 'packagenames="org.lockss.*"' as above results in the doc set
	 including all the referenced classes in those packages, but with
	 none of the javadoc comments, because the source isn't available.
	 So the test classes are included individually instead, which
	 results in no package index.
	 An alternative would be to fully include the non-test classes,
	 by putting them on the sourcepath.  -->
    <mkdir dir="${test.javadoc}"/>
    <!-- Old files can result in misleading stuff in the docs.  Since
         javadoc regenerates everything from scratch each time anyway,
	 ensure the directory is cleared out first.  -->
    <delete>
      <fileset dir="${test.javadoc}" defaultexcludes="no" />
    </delete>
<!--  packagenames="org.lockss.test.*" -->
    <javadoc 
             sourcepath="${test.src}"
             destdir="${test.javadoc}"
             author="true"
             version="true"
             protected="true"
             windowtitle="LOCKSS test classes API"
             doctitle="LOCKSS test"
             bottom="Copyright &#169; 2002 Board of Trustees of Leland Stanford Jr. University, all rights reserved.">
<!--         <fileset dir="${test.src}" includes="**/*.java"/> -->
       <fileset dir="${test.src}" includes="**/*.java" excludes="**/Test*.java"/>
       <classpath refid="test.compile.classpath" />
    </javadoc>
  </target>

  <!-- ==================================================================== -->
  <target name="jdftp" depends="javadoc,javadoc-test" >
    <echo message="Copying javadoc to server"/>
    <exec executable="./jdftp" dir="${basedir}">
    </exec>
  </target>

  <!-- ==================================================================== -->
  <target name="index" depends="jar-doclet"
   description="Print an index for a .java file">
    <tempfile property="index.file" destdir="${java.io.tmpdir}"
       prefix="index"/>
    <property name="copies" value="1" />
    <basename property="indexname" file="${file}" suffix=".java" />
    <javadoc 
       sourcepath="${src}"
       sourcefiles="${file}"
       destdir="${javadoc}"
       failonerror="true"
       access="private">
      <doclet name="org.lockss.doclet.Indexer"
              path="${lockss.doclet.jar}">
	<param name="-o" value="${index.file}" />
  	<param name="-dots" value="0" />
      </doclet>
      <classpath refid="compile.classpath" />
    </javadoc>
    <apply executable="a2ps" dir="${basedir}"
           parallel="true">
      <arg value="-3"/>
      <arg value="--header="/>
      <arg value="--center-title=${indexname} Index"/>
      <arg value="--footer=${file}"/>
      <arg value="-l"/>
      <arg value="50"/>
      <arg value="--copies=${copies}"/>
      <arg value="--prologue=matrix"/>
<!--        <arg value="-o"/> -->
<!--        <arg value="foo.ps"/> -->
      <arg value="${index.file}"/>
      <fileset dir="${basedir}" excludes="* **/*"/>
    </apply>
     <delete file="${index.file}" quiet="true"/>
  </target>

  <!-- ==================================================================== -->
  <target name="print"
   description="Print a .java file">
    <property name="copies" value="1" />
    <apply executable="a2ps" dir="${basedir}"
           relative="true"
           parallel="true">
      <arg value="-C"/>
      <arg value="--header="/>
      <arg value="--copies=${copies}"/>
      <arg value="-S Collate:true"/>
<!--        <arg value="-o"/> -->
<!--        <arg value="foo.ps"/> -->
      <arg value="${file}"/>
      <fileset dir="${basedir}" excludes="* **/*"/>
    </apply>
<!--       <delete file="${index.file}" quiet="true"/> -->
  </target>

  <!-- ==================================================================== -->
<!--  Once we have more files this will fail due to command line length.
      It should pipe the names to etags as in:
      find . -name \*.java -print | etags -t -S - -->
  <target name="tags" depends="prepare"
   description="Build an emacs TAGS file" >
    <apply executable="etags" dir="${basedir}"
           relative="true"
           parallel="true">
      <arg value="-S"/>
<!--        <arg value="-o"/> -->
<!--        <arg file="${etags.filename}"/> -->
      <fileset dir="${basedir}" includes="**/*.java"/>
    </apply>
    <property name="tagsfile" location="TAGS" />
    <echo>Tags written to ${tagsfile}</echo>
  </target>

  <!-- ==================================================================== -->
  <target name="proxy" depends="jar-tests"
   description="Run the proxy" >
    <java classname="org.lockss.proxy.StartProxy" fork="true">
       <classpath refid="test.run.classpath" />
    </java>
  </target>

  <!-- ==================================================================== -->
  <target name="run-class" depends="jar-tests,check.class.arg"
   description="Run a class named by class prop, with args in args prop" >
    <!-- default args empty if not supplied on command line -->
    <property name="args" value="" />
    <java classname="${class}" fork="true">
       <classpath refid="test.run.classpath" />
       <arg line="${args}" />
       <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
       <sysproperty key="java.library.path" value="${test.native}"/>
    </java>
  </target>

  <!-- ==================================================================== -->
  <target name="test-all"
   depends="prepare.run.test,check.junit,jar-tests"
   description="Run all the junit tests (test/src/**/Test*.class" >
    <echo>
Test results in ${test.results}
    </echo>
    <property name="include" value="**/Test*.java" />
    <delete file="${test.results}/*" quiet="true" />
    <junit1 fork="no" printsummary="yes" haltonerror="yes" haltonfailure="yes">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="${include}" />
          <exclude name="${exclude}" />
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>        
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
  </target>

  <!-- ==================================================================== -->
  <target name="func-all"
   depends="prepare.test,check.junit,jar-tests"
   description="Run all the functional tests (test/src/**/Func*.class" >
    <echo>
Test results in ${test.results}
    </echo>
    <delete file="${test.results}/*" quiet="true" />
    <junit1 fork="yes" printsummary="yes"
            haltonerror="yes" haltonfailure="yes">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/Func*.java" />
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath>
         <path refid="test.run.classpath" />
      </classpath>        
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
  </target>

  <!-- ==================================================================== -->
<!-- doesn't work
  <target name="test-all-debug"
   depends="prepare.test,check.junit,jar-tests"
   description="Run all the junit tests (test/src/**/Test*.class, under the debugger" >
    <echo>
Test results in ${test.results}
    </echo>
    <delete file="${test.results}/*" quiet="true" />
    <junit fork="yes" printsummary="yes" haltonerror="yes" haltonfailure="yes"
      jvm="jdb" >
      <batchtest fork="yes" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/Test*.java" />
        </fileset>
      </batchtest>   
      <formatter type="plain" usefile="true" />                  
      <classpath> 
         <path refid="test.run.classpath" />
      </classpath>        
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
    </junit>
  </target>
-->
  <!-- ==================================================================== -->
  <target name="test-class"
   depends="prepare.test,check.class.arg,check.junit,jar-ant,jar-tests"
   description="Run all tests for a single class, named by the 'class' property" >
    <echo>
Running tests for class ${class}
Test results in ${test.results}
    </echo>
    <delete file="${test.results}/*" quiet="true" />
    <junit fork="yes" printsummary="yes" haltonerror="yes" haltonfailure="yes"
        showoutput="${showoutput}">
      <batchtest fork="${fork}" todir="${test.results}">
        <fileset dir="${test.src}">
          <include name="**/Test*.java" />
	  <custom classname="org.lockss.ant.ClassTestSelector">
	    <classpath> 
	      <pathelement path="${lockss.ant.jar}" />
	      <path refid="test.run.classpath" />
	    </classpath>        
	    <param name="class" value="${class}" />
	  </custom>
        </fileset>
      </batchtest>
      <formatter type="plain" usefile="true" />
      <classpath> 
         <path refid="test.run.classpath" />
      </classpath>        
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
    </junit>
  </target>

  <!-- ==================================================================== -->
  <target name="test-one"
   depends="prepare.run.test,check.class.arg,check.junit,jar-tests"
   description="Run a single test class, named by the 'class' property" >
    <junit1 fork="no" printsummary="yes" haltonerror="yes" haltonfailure="yes"
         filtertrace="yes"
         showoutput="${showoutput}">
      <jvmarg value="-Xmx128m"/>  <!-- no effect unless both fork=yes -->
      <test fork="${fork}" name="${class}" />
      <formatter type="plain" usefile="false" />                  
      <classpath> 
         <path refid="test.run.classpath" />
      </classpath>        
      <sysproperty key="java.library.path" value="${test.native}"/>
      <sysproperty key="org.lockss.unitTesting" value="true"/>
      <sysproperty key="org.lockss.defaultLogLevel" value="${loglevel}"/>
      <sysproperty key="org.lockss.defaultLogTarget" value="${logtarget}"/>
      <sysproperty key="org.lockss.keepTempFiles" value="${keeptempfiles}"/>
      <sysproperty key="org.lockss.test.timeout.shouldnt" value="${timeout}"/>
    </junit1>
  </target>

  <!-- ==================================================================== -->
  <target name="rebuild-all"
   depends="clean,test-all,javadoc,javadoc-test"
   description="Clean, build and test all, and javadoc." >
  </target>

  <!-- ==================================================================== -->
  <target name="checkout-and-build"
     depends="check.contrib"
     description="Checkout current cvs into a new temp dir and build all.  Delete temp dir iff build was successful." >
   <property name="cvstag" value="" />
   <mkdir dir="${temp.build}" />
   <tempfile property="temp.build.dir" destdir="${temp.build}" prefix="build"/>
   <mkdir dir="${temp.build.dir}" />
   <trycatch property="recursive.error.msg">
    <try>
     <if>
      <equals arg1="${cvstag}" arg2="" />
      <then>
       <echo>Checking out to ${temp.build.dir}</echo>
      </then>
      <else>
       <echo>Checking out tag "${cvstag}"
  to ${temp.build.dir}</echo>
      </else>
     </if>
     <cvs command="-Q checkout" package="lockss-gamma" dest="${temp.build.dir}"
       tag="${cvstag}" failonerror="true"/>
     <echo>Building and testing in ${temp.build.dir}</echo>
<!--
	Would prefer to run build in separate jvm, but ant task doesn't
	support the fork= attribute.  Don't want to pass most properties
	from this invocation, as they point to the current build dir,
	not the one under tempduild.  But we need to arrange for it to not
	try to redefine tasks that were defined in the outer invocation.
        Passing in ant-contrib.loaded accomplishes that, but isn't really
        right.
-->
     <ant dir="${temp.build.dir}/${cvs.project}"
	   target="test-all"
	   inheritAll="false">
       <property name="ant-contrib.loaded" value="${ant-contrib.loaded}" />
     </ant>
     <echo>Build was successful, deleting "${temp.build.dir}"</echo>
     <delete dir="${temp.build.dir}" quiet="true"/>
     <property name="checkout.and.build.worked" value="true" />
    </try>
    <catch>
     <echo>*** Failed temp checkout left in
*** ${temp.build.dir}
*** Use clean-tempbuild target to delete it.</echo>
     <fail message="Recursive build failed."/>
    </catch>
   </trycatch>
  </target>

  <!-- ==================================================================== -->
  <target name="javah-test" depends="jar-tests"
   description="Generate headers for native code in test/" >
     <javah destdir="${test.native}">
      <classpath> 
         <path refid="test.run.classpath" />
      </classpath>        
      <class name="org.lockss.test.DebugUtils" />
     </javah>
  </target>

  <!-- ==================================================================== -->
  <target name="native-test" depends="javah-test"
   description="Compile and link native code in test/" >
     <exec dir="${test.native}" executable="make" />
  </target>

  <!-- ==================================================================== -->
  <target name="pre-commit-test" depends="rebuild-all"
   description="Synonym for rebuild-all." />

  <target name="post-commit-test" depends="checkout-and-build"
   description="Synonym for checkout-and-build." />

  <!-- ==================================================================== -->
  <target name="check.class.arg" unless="class.arg.specified" >
    <fail message="The &quot;class&quot; arg must be specified with -Dclass=&lt;classname&gt;" />
  </target>

  <target name="check.junit"
   depends="check.junit.task,check.junit.jar">
  </target>

  <target name="check.junit.task" unless="junit.task.available" >
    <fail message="
 The &lt;junit&gt; task is not available.
 You need to install the Ant optional tasks .jar in the [ant]/lib directory.
 Please see Ant's JUnit task doc for more information"
   />
  </target>

  <target name="check.junit.jar" unless="junit.available" >
    <fail message="
  The junit .jar is not in the Ant class path.
  You need to place a copy of junit.jar on the classpath.
  Please see Ant's JUnit task doc for more information"
    />
  </target>

  <target name="check.contrib"
   depends="prepare.contrib,load.ant-contrib" />

  <target name="load.ant-contrib" unless="ant-contrib.loaded" >
   <!--  Non-standard tasks -->
   <taskdef resource="${ant-contrib.resource}">
    <classpath refid="ant-contrib.classpath"/>
   </taskdef>
   <property name="ant-contrib.loaded" value="true" />
  </target>

<!--
  <target name="check.ant-contrib.jar" unless="ant-contrib.available" >
  <taskdef resource="${ant-contrib.resource}">
   <classpath refid="ant-contrib.classpath"/>
  </taskdef>

    <fail message="You need to place a copy of ant-contrib-0.1.jar in ${lib}." />
  </target>
-->

</project>
