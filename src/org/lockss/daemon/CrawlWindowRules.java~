/*
 * $Id$
 */

/*

Copyright (c) 2000-2003 Board of Trustees of Leland Stanford Jr. University,
all rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of Stanford University shall not
be used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from Stanford University.

*/

package org.lockss.daemon;

import java.util.*;
import org.lockss.util.*;

/**
 * Several useful CrawlWindow implementations.
 */
public class CrawlWindows {

  public static class BaseCrawlWindow implements CrawlWindow {
    protected CrawlWindow.Window window;
    protected int action;

    /** Include if match, else ignore */
    public static final int MATCH_INCLUDE = 1;
    /** Exclude if match, else ignore */
    public static final int MATCH_EXCLUDE = 2;
    /** Include if no match, else ignore */
    public static final int NO_MATCH_INCLUDE = 3;
    /** Exclude if no match, else ignore */
    public static final int NO_MATCH_EXCLUDE = 4;
    /** Include if match, else exclude */
    public static final int MATCH_INCLUDE_ELSE_EXCLUDE = 5;
    /** Exclude if match, else include */
    public static final int MATCH_EXCLUDE_ELSE_INCLUDE = 6;

    /**
     * @param window the Window
     * @param action one of the constants above.
     */
    public BaseCrawlWindow(CrawlWindow.Window window, int action) {
      this.window = window;
      this.action = action;
    }

    /**
     * Determine whether the date is included, excluded or ignored by this rule
     * @param serverDate date to check.
     * @return MATCH_INCLUDE if the URL should be fetched, MATCH_EXCLUDE if
     * if shouldn't be fetched, or MATCH_IGNORE if this rule is agnostic
     * about the URL.
     */
    public int canCrawl(Date serverDate) {
      boolean match = window.isMatch(serverDate);
      switch (action) {
        case MATCH_INCLUDE:
          return (match ? INCLUDE : IGNORE);
        case MATCH_EXCLUDE:
          return (match ? EXCLUDE : IGNORE);
        case NO_MATCH_INCLUDE:
          return (!match ? INCLUDE : IGNORE);
        case NO_MATCH_EXCLUDE:
          return (!match ? EXCLUDE : IGNORE);
        case MATCH_INCLUDE_ELSE_EXCLUDE:
          return (match ? INCLUDE : EXCLUDE);
        case MATCH_EXCLUDE_ELSE_INCLUDE:
          return (!match ? INCLUDE : EXCLUDE);
      }
      return IGNORE;
    }
  }

  /**
   * CrawlWindows.FirstMatch matches against a list of
   * {@link CrawlWindow}s and returns the first match it finds, or
   * <code>CrawlWindow.IGNORE</code> if none match.
   */
  public static class FirstMatch implements CrawlWindow {
    private List windows;

    /**
     * Create a window that matches against the given list of windows
     * @param windows list of {@link CrawlWindow}s
     * @throws NullPointerException if the list is null.
     */
    public FirstMatch(List windows) {
      if (windows == null) {
        throw new NullPointerException("CrawlWindows.FirstMatch with null list");
      }
      this.windows = ListUtil.immutableListOfType(windows, CrawlWindow.class);
    }

    public int canCrawl(Date serverDate) {
      Iterator iter = windows.iterator();
      while (iter.hasNext()) {
        int match = ((CrawlWindow)iter.next()).canCrawl(serverDate);
        if (match != CrawlWindow.IGNORE) {
          return match;
        }
      }
      return IGNORE;
    }


    public String toString() {
      return "[CrawlWindow.FirstMatch: " + windows + "]";
    }
  }

  public static class Interval extends CrawlWindow.Window {
    Calendar start;
    Calendar end;
    int field;

    public Interval(Calendar start, Calendar end, int field) {
      this.start = start;
      this.end = end;
      this.field = field;
    }

    public boolean isMatch(Date serverDate) {
      return false;
    }
  }

  public static class Pair extends CrawlWindow.Window {
    CrawlWindow.Window win1;
    CrawlWindow.Window win2;
    int operation;

    /** Boolean 'and' operation for windows */
    public static final int AND = 0;
    /** Boolean 'or' operation for windows */
    public static final int OR = 1;

    public Pair(CrawlWindow.Window win1, CrawlWindow.Window win2,
                int operation) {
      this.win1 = win1;
      this.win2 = win2;
      this.operation = operation;
    }

    public boolean isMatch(Date serverDate) {
      if (operation==AND) {
        return (win1.isMatch(serverDate) && win2.isMatch(serverDate));
      } else if (operation==OR) {
        return (win1.isMatch(serverDate) || win2.isMatch(serverDate));
      } else {
        return false;
      }
    }
  }

}
